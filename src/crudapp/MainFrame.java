/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package crudapp;

import java.awt.Component;
import java.io.IOException;
import java.io.InputStream;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author User
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtEmail = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtUsername = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblResult = new javax.swing.JTable();
        txtHome = new javax.swing.JButton();
        txtCreate = new javax.swing.JButton();
        txtRead = new javax.swing.JButton();
        txtUpdate = new javax.swing.JButton();
        txtDelete = new javax.swing.JButton();
        txtPassword = new javax.swing.JPasswordField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID:");

        txtId.setEditable(false);
        txtId.setEnabled(false);
        txtId.setName("txtId"); // NOI18N
        txtId.setPreferredSize(new java.awt.Dimension(70, 22));

        jLabel2.setText("Name:");

        jLabel3.setText("E-mail:");

        jLabel4.setText("Username:");

        jLabel5.setText("Password:");

        tblResult.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        tblResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblResultMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblResult);

        jTabbedPane1.addTab("Search Result", jScrollPane1);

        txtHome.setText("Home");
        txtHome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtHomeActionPerformed(evt);
            }
        });

        txtCreate.setText("Create");
        txtCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCreateActionPerformed(evt);
            }
        });

        txtRead.setText("Read");
        txtRead.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtReadActionPerformed(evt);
            }
        });

        txtUpdate.setText("Update");
        txtUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUpdateActionPerformed(evt);
            }
        });

        txtDelete.setText("Delete");
        txtDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtHome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCreate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRead)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtUpdate)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDelete))
                    .addComponent(jLabel5)
                    .addComponent(jLabel4)
                    .addComponent(jLabel3)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(txtPassword, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(txtUsername, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtHome)
                    .addComponent(txtCreate)
                    .addComponent(txtRead)
                    .addComponent(txtUpdate)
                    .addComponent(txtDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtHomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtHomeActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tblResult.getModel();
        model.setRowCount(0);
        Component[] components = getContentPane().getComponents();
        for(Component component : components) {
            if(component instanceof JTextField) {
                ((JTextField) component).setText("");                
            }
        }
        
        txtName.requestFocus();
    }//GEN-LAST:event_txtHomeActionPerformed

    private void txtCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCreateActionPerformed
        // TODO add your handling code here:
        Component[] components = getContentPane().getComponents();
        boolean isEmpty = false;
        for(Component component : components) {
            if(component instanceof JTextField) {
                if(((JTextField) component).getText().isEmpty() && !txtId.getName().equals(component.getName())) {
                    isEmpty = true;
                }
            }
        }
        
        if(isEmpty) {
            JOptionPane.showMessageDialog(null, "Please fill the fields.", "Crud", JOptionPane.OK_OPTION);
        }
        else {
            try {
                InputStream input = getClass().getResourceAsStream("database.properties");
                Properties properties = new Properties();
                properties.load(input);
                Connection connection = DriverManager.getConnection(properties.getProperty("db.url"), properties.getProperty("db.user"), properties.getProperty("db.password"));
                String sqlScript = "INSERT INTO javacrud.javacrud(name, email, username, password)VALUES(?,?,?,?)";
                PreparedStatement preparedStatement = connection.prepareStatement(sqlScript);
                preparedStatement.setString(1, txtName.getText());
                preparedStatement.setString(2, txtEmail.getText());
                preparedStatement.setString(3, txtUsername.getText());
                preparedStatement.setString(4, txtPassword.getText());
                int rowsInserted = preparedStatement.executeUpdate();
                
                if(rowsInserted == 1) {
                    JOptionPane.showMessageDialog(null, "User created sucessfully.", "Sucess", JOptionPane.INFORMATION_MESSAGE);
                    txtHomeActionPerformed(evt);
                }
                else {
                    JOptionPane.showMessageDialog(null, "No user created.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_txtCreateActionPerformed

    private void txtReadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtReadActionPerformed
        txtHomeActionPerformed(evt);
        
        try {
            // TODO add your handling code here:
            InputStream input = getClass().getResourceAsStream("database.properties");
            Properties properties = new Properties();
            properties.load(input);
            Connection connection = DriverManager.getConnection(properties.getProperty("db.url"), properties.getProperty("db.user"), properties.getProperty("db.password"));
            String sqlScript = "SELECT * FROM javacrud.javacrud";
            Statement stmt = connection.prepareStatement(sqlScript);
            ResultSet resultSet = stmt.executeQuery(sqlScript);
            
            DefaultTableModel defaultTableModel = new DefaultTableModel(){
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }                
            };
            
            int columnCount = resultSet.getMetaData().getColumnCount();
            for(int i=1; i <= columnCount; i++) {
                defaultTableModel.addColumn(resultSet.getMetaData().getColumnName(i));
            }
            
            while(resultSet.next()) {
                Object[] rowData = new Object[columnCount];
                for(int i=0; i<columnCount; i++) {
                    rowData[i] = resultSet.getObject(i+1);
                }
                defaultTableModel.addRow(rowData);
            }            
            
            tblResult.setModel(defaultTableModel);
            tblResult.setRowHeight(30);
            repaint();
            stmt.close();
            resultSet.close();
            connection.close();
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtReadActionPerformed

    private void txtUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUpdateActionPerformed
        // TODO add your handling code here:
        if(txtId.getText().isEmpty()) {
            return;
        }
        
        try {
            InputStream input = getClass().getResourceAsStream("database.properties");
            Properties properties = new Properties();
            properties.load(input);
            Connection connection = DriverManager.getConnection(properties.getProperty("db.url"), properties.getProperty("db.user"), properties.getProperty("db.password"));
            String sqlScript = "UPDATE javacrud.javacrud SET name=?, email=?, username=?, password=? WHERE id=?";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlScript);
            preparedStatement.setString(1, txtName.getText());
            preparedStatement.setString(2, txtEmail.getText());
            preparedStatement.setString(3, txtUsername.getText());
            preparedStatement.setString(4, txtPassword.getText());
            preparedStatement.setString(5, txtId.getText());
            int rowsUpdated = preparedStatement.executeUpdate();

            if(rowsUpdated == 1) {
                JOptionPane.showMessageDialog(null, "Updated sucessfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                txtHomeActionPerformed(evt);
            }
            else {
                JOptionPane.showMessageDialog(null, "No updated.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }       
    }//GEN-LAST:event_txtUpdateActionPerformed

    private void txtDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDeleteActionPerformed
        // TODO add your handling code here:
        if(txtId.getText().isEmpty()) {
            return;
        }
        
        if(JOptionPane.showConfirmDialog(null, "Confirm deletion?", "Confirmation", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE) == JOptionPane.NO_OPTION) {
            return;
        }
        
        try {
            InputStream input = getClass().getResourceAsStream("database.properties");
            Properties properties = new Properties();
            properties.load(input);
            Connection connection = DriverManager.getConnection(properties.getProperty("db.url"), properties.getProperty("db.user"), properties.getProperty("db.password"));
            String sqlScript = "DELETE FROM javacrud.javacrud WHERE id=?";
            PreparedStatement preparedStatement = connection.prepareStatement(sqlScript);
            preparedStatement.setString(1, txtId.getText());
            int rowsDeleted = preparedStatement.executeUpdate();
            
            if(rowsDeleted == 1) {
                JOptionPane.showMessageDialog(null, "Deleted Sucessfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                txtReadActionPerformed(evt);
            }
            else {
                JOptionPane.showMessageDialog(null, "No deleted.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        } catch (SQLException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtDeleteActionPerformed

    private void tblResultMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblResultMouseClicked
        // TODO add your handling code here:
        if(evt.getClickCount() == 2) {
            int selectedRow = tblResult.getSelectedRow();
            if(selectedRow != -1) {
                fillScreenFields(selectedRow);
            }
        }
    }//GEN-LAST:event_tblResultMouseClicked

    private void fillScreenFields(int selectedRow) {
        DefaultTableModel defaultTableModel = (DefaultTableModel) tblResult.getModel();
        txtId.setText(defaultTableModel.getValueAt(selectedRow, 0).toString());
        txtName.setText(defaultTableModel.getValueAt(selectedRow, 1).toString());
        txtEmail.setText(defaultTableModel.getValueAt(selectedRow, 2).toString());
        txtUsername.setText(defaultTableModel.getValueAt(selectedRow, 3).toString());
        txtPassword.setText(defaultTableModel.getValueAt(selectedRow, 4).toString());
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable tblResult;
    private javax.swing.JButton txtCreate;
    private javax.swing.JButton txtDelete;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JButton txtHome;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JPasswordField txtPassword;
    private javax.swing.JButton txtRead;
    private javax.swing.JButton txtUpdate;
    private javax.swing.JTextField txtUsername;
    // End of variables declaration//GEN-END:variables

}
